/**
 * generated by Xtext - then hand edited by Paul Harrison.
 */
package net.ivoa.vodml.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import net.ivoa.vodml.vodsl.ModelDeclaration
import net.ivoa.vodml.vodsl.IncludeDeclaration
import net.ivoa.vodml.vodsl.AbstractElement
import net.ivoa.vodml.vodsl.PackageDeclaration
import net.ivoa.vodml.vodsl.ObjectType
import net.ivoa.vodml.vodsl.Enumeration
import net.ivoa.vodml.vodsl.DataType
import net.ivoa.vodml.vodsl.PrimitiveType
import net.ivoa.vodml.vodsl.VoDataModel
import net.ivoa.vodml.vodsl.EnumLiteral
import net.ivoa.vodml.vodsl.Attribute
import net.ivoa.vodml.vodsl.Constraint
import net.ivoa.vodml.vodsl.Multiplicity
import net.ivoa.vodml.vodsl.ReferableElement
import java.util.TimeZone
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.Date
import org.eclipse.emf.ecore.EObject
import net.ivoa.vodml.vodsl.Reference

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class VodslGenerator implements IGenerator {
	
	 static val TimeZone tz = TimeZone.getTimeZone("UTC")
    static val DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    new()
    {
    	df.setTimeZone(tz)
    }
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val vodecl = resource.allContents.filter(typeof(VoDataModel)).head // surely there must be a better way of getting this one....
		val modelDecl = vodecl.model
		val filename = modelDecl.name + '.vo-dml.xml'
		fsa.generateFile(filename, vodecl.vodml)
	}
	
	
	def vodml(VoDataModel e)'''
	<?xml version="1.0" encoding="UTF-8"?>
	<vo-dml:model xmlns:vo-dml="http://volute.googlecode.com/dm/vo-dml/v0.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://volute.googlecode.com/dm/vo-dml/v0.9 https://volute.googlecode.com/svn/trunk/projects/dm/vo-dml/xsd/vo-dml.xsd">
	<!-- file generated from VODSL -->
      <vodml-id>«e.model.name»</vodml-id>
      <name>«e.model.name»</name>
      <description>«e.model.description»</description> 
      «FOR f: e.elements»
        «f.vodml»
      «ENDFOR»
      <version>«e.model.version»</version>
      <lastModified>«df.format(new Date())»</lastModified>
      «FOR f:e.includes»
      	«f.vodml»
      «ENDFOR»
   </vo-dml:model>
	'''
	
	
	def vodml(IncludeDeclaration e) '''
	<import>
	  <prefix>notyetknown</prefix>
	  <url>«e.importURI»</url>
	  <documentationURL>not known</documentationURL>
	</import>
	'''
	
	def vodml(AbstractElement e)
	{
      //shame that xtend does not do dynamic dispatch - at least not in the way that I thought....
      switch  e {
      	PackageDeclaration : (e as PackageDeclaration).vodml
      	ObjectType : (e as ObjectType).vodml
      	Enumeration : (e as Enumeration).vodml
      	DataType : (e as DataType).vodml
      	PrimitiveType: (e as PrimitiveType).vodml
      	default: "unknown type " + e.class
      }
      		
 
	}
	
	def preamble(ReferableElement e) '''
	   <vodml-id>«e.name»</vodml-id>
	   <name>«e.name»</name>
	   <description>«e.description»</description>	    
	'''
	
	def vodml (PackageDeclaration e)'''
	<package>
	   «e.preamble»
      «FOR f: e.elements»
         «f.vodml»
      «ENDFOR»
	</package>
	'''
	def vodml (ObjectType e)'''
	<objectType «IF e.abstract» abstract='true'«ENDIF»>
	   «e.preamble»
	   «IF e.superType != null»
	   <extends>
	      «(e.superType as ReferableElement).vodml»
	   </extends>
	   «ENDIF»
	   «FOR f: e.constraints»
	   	«f.vodml»
	   «ENDFOR»
	   «FOR f: e.attributes»
	   	«f.vodml»
	   «ENDFOR»
	   «FOR f: e.references»
	   	«f.vodml»
	   «ENDFOR»
	   
	   
	</objectType>
	'''
	def vodml (Attribute e)'''
	«val atstr = e.attrType»
	<«atstr»>
	  «e.preamble»
	  <datatype>
	     «(e.type as ReferableElement).vodml»
	  </datatype>
	  «vodml(e.multiplicity)»
	</«atstr»>
	'''
	
	def attrType(Attribute attribute)
	{
		if(attribute.composition)
		{
			"collection"
		}
		else
		{
			"attribute"
		}
		
	}
	

   def vodml(ReferableElement e)'''
   <utype>«e.UType»</utype>
   '''

/**
 * this should give the full UType name. TODO this is not really working - the scoping of the types should fill this in, as the rules are a bit tricky
 */
   def UType(ReferableElement e)
   {
   	//hunt for the containing VODatModelImpl (is there a better way to do this?)
   	var cont = e as EObject
   	while (cont.eContainer != null)
   	{
   		cont = cont.eContainer
   	}
   	(cont as VoDataModel).model.name +":"+e.name
   }


//No multiplicity
   def vodml(Reference e)'''
   <reference>
     «e.preamble»
     <datatype>
       «(e.referenced as ReferableElement).vodml»
     <datatype>
   </reference>
   '''
   
// this is not really doing correct thing for attributes yet...
   def vodml(Constraint e)'''
   <constraint>
      «IF e.expr != null»
        <expression>«e.expr»</expression>
        <language>«e.language»</language>
      «ENDIF»
   </constraint>
   '''


	def vodml (Enumeration e)'''
	<enumeration>
	   «e.preamble»
      «FOR f: e.literals»
         «f.vodml»
      «ENDFOR»
	</enumeration>
	'''
	def vodml (DataType e)'''
	<dataType  «IF e.abstract» abstract='true'«ENDIF»>
	  «e.preamble»
	   «IF e.superType != null»
	   <extends>
	      «(e.superType as ReferableElement).vodml»
	   </extends>
	   «ENDIF»
	   «FOR f: e.constraints»
	   	«f.vodml»
	   «ENDFOR»
	   «FOR f: e.attributes»
	   	«f.vodml»
	   «ENDFOR»
	</dataType>
	'''
	
	def vodml (Multiplicity e)
	{
		if (e != null)
		{
			if(e.multiplicitySpec != null)
			{
				switch e.multiplicitySpec {
					case ATLEASTONE: {
						vodml(1,-1)
					}
					case MANY: {
						vodml(0,-1)
					}
					case OPTIONAL: {
						vodml(0,1)
					}
					
				}
			}
			else
			{
				vodml(e.minOccurs, e.maxOccurs)
			}
		}
		else
		{
		vodml(1, 1)
		}
	}
	
	def vodml(int minOccurs, int maxOccurs)'''
	<multiplicity>
	  <minOccurs>«minOccurs»</minOccurs>
	  <maxOccurs>«maxOccurs»</maxOccurs>
	</multiplicity>
	'''
	
	
	def vodml (PrimitiveType e)'''
   <primitiveType>
     «e.preamble»
   </primitiveType>
	'''
	def vodml (EnumLiteral e)'''
   <literal>
     «e.preamble»
   </literal>	
	'''
	
}
