/*
 * generated by Xtext
 */
package net.ivoa.vodml.validation

import net.ivoa.vodml.vodsl.Attribute
import net.ivoa.vodml.vodsl.Multiplicity
import net.ivoa.vodml.vodsl.MultiplicityBound
import net.ivoa.vodml.vodsl.ValueType
import net.ivoa.vodml.vodsl.VodslPackage
import org.eclipse.xtext.validation.Check

import static net.ivoa.vodml.vodsl.MultiplicityBound.*

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class VodslValidator extends AbstractVodslValidator {

	@Check
	def checkAttributeType(Attribute attr) {
		if (!attr.composition) {
			if (!(attr.type instanceof ValueType)) {

				error('Attribute should be a value type', VodslPackage.Literals.ATTRIBUTE__TYPE)
			}
		}

	}

	@Check
	def checkMultiplicity(Multiplicity mul) {
		val attr = mul.eContainer as Attribute
		if (attr.composition) {
			if (mul.multiplicitySpec == null || mul.multiplicitySpec == MultiplicityBound.ONE) {
				if (mul.maxOccurs < mul.minOccurs) {
					error("maximum multiplicity less than minimum", VodslPackage.Literals.MULTIPLICITY__MAX_OCCURS)
				}
			}
		} else { 
			if (mul.multiplicitySpec != null) {
				switch mul.multiplicitySpec {
					case ATLEASTONE: {
						error("multiplicity '+' not allowed for attribute",
							VodslPackage.Literals.MULTIPLICITY__MULTIPLICITY_SPEC)
					}
					case MANY: {
						error("multiplicity '*' not allowed for attribute",
							VodslPackage.Literals.MULTIPLICITY__MULTIPLICITY_SPEC)

					}
					case OPTIONAL: {
						//OK
					}
					case ONE: {
				if (mul.maxOccurs != 0 && mul.minOccurs != mul.maxOccurs) {
					error("multiplicity for attribute should specify array size so that min=max",
						VodslPackage.Literals.MULTIPLICITY__MAX_OCCURS)
				}
					}
				}
			}
		}
	}
}
