grammar net.ivoa.vodml.Vodsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate vodsl "http://www.ivoa.net/vodml/Vodsl"

/*
 * DSL for VODML - Paul Harrison, Apr 2014.
 */

/**
 * The root model element, comprised of one optional include section
 * and the definition of any number of compound types.
 */
VoDataModel:
	 model = ModelDeclaration
	 ( includes += IncludeDeclaration ) *
    elements += AbstractElement+
    ;


ModelDeclaration:
	'model' name=ID '(' version=VERSION ')' description=STRING?
;

/* avoid terminals here as causes confusion in the LEXing which is greedy see http://www.eclipse.org/forums/index.php/t/263071/ */
VERSION returns ecore::EString : INT ('.' INT)?;

IncludeDeclaration:
	'include' importURI=STRING
;

QualifiedName:
  ValidID (=>'.' ValidID)*;

QualifiedNameWithWildcard:
	 QualifiedName '.*'?
;

ValidID:
	ID;
	
ValueType:
	Enumeration | DataType | PrimitiveType
;

DefinitionType:
	ObjectType | ValueType
;

AbstractElement:
   PackageDeclaration| DefinitionType;
 
/*TODO - just call this package - semantically this is the whole package */
  PackageDeclaration:
  'package' name=ID description=STRING? '{'
    elements+=AbstractElement+
  '}';

/**
 * Convenience meta type
 * (not actually referenced from anywhere in the grammar defn, but appear in the VODML spec! and makes code generation easier).
 */


ReferableElement :
	AbstractElement | EnumLiteral | Attribute | Reference
;  

/**
 * Definition for a primitive type.
 * TODO not really sure that it captures the subsets idea from VODML really yet...
 */
PrimitiveType:
   'primitive' name=ID       
            ( '->' superType=[PrimitiveType|QualifiedName] )?
            description = STRING
    ;

/**
 * Definition of a data type complete with its constituent fields,
 * constraints
 */
DataType:
    ( abstract?='abstract'? ) 'dtype' name=ID 
    ( 'extends' superType=[DataType|QualifiedName] )? 
    (description=STRING)?
    
    '{'
        ( attributes += Attribute )*
        ( references += Reference ) *
        ( constraints += Constraint )*
    '}'
    ;


/*
 * composition/referencing probably needs a better design.
 * 
 */
Attribute :
    name=ID ':' type=[DefinitionType|QualifiedName] (multiplicity=Multiplicity )? ('as' (ordered?='ordered')? composition?='composition')?  description=STRING ((semanticConcept=SemanticConcept)? & ( constraints += Constraint )* )';'
    ;

/*
 * the @ is not really necessary from a parsing/grammar point of view - just put in to make it stand out in the text
 * when not present it is assumed that the multiplicity is @[1..1]
 */
Multiplicity :
	'@' ( ('[' (minOccurs=MInt) ('..' maxOccurs=MInt)? ']' ) | ( multiplicitySpec = MultiplicityBound ) )
;
		
/* need this because of problems with the terminal INT rule in different contexts  */		
MInt returns ecore::EInt : INT ;
  
/*shortcut representation of common multiplicities - the ONE is a bit ugly - but first is the what will get bound to multiplicitySpec by default */
enum MultiplicityBound :
	ONE | MANY='*' | OPTIONAL='?' | ATLEASTONE='+' ;


Enumeration:
    'enum' name=ID (description=STRING)?
    '{'
        literals += EnumLiteral (',' literals += EnumLiteral) *
    '}'
    ;

EnumLiteral:
    name=ID (description=STRING)?
    ;

ObjectType:
    ( abstract?='abstract'? ) 'otype' name=ID
        ( 'extends' superType=[ObjectType|QualifiedName] )? (description=STRING)?
    '{'
        ( attributes += Attribute )*
        ( references += Reference )*
        ( constraints += Constraint )*
    '}'
    ;	

/*
 * The reference to a definitionType is not quite allowed - allows reference to an attribute for instance - TODO need to custom scope this so that only DataTypes and ObjectTypes are allowed I think.
 */
Reference:
	 name=ID (multiplicity=Multiplicity )? 'references' referenced=[DefinitionType|QualifiedName]  description=STRING ';'
;

/*
 * The constraint is just the same as the XML definition - TODO min/max datatypes are not well specified any longer in VODML - they are all strings 
 * 
 * perhaps could have constraints expressions that were more like traditional logical expressions
 */
Constraint:
	{Constraint}
    '<' (expr=STRING 'as' language=ConstraintLanguage)? (('min=' min=STRING)? & ('max=' max=STRING)? & ('minlen=' minlen=INT)? 
    & ('maxlen=' maxlen=INT)? & ('len=' len=INT)? & ((unique?='unique' )|(gunique?='unique globally'))?) '>'
    ;

enum ConstraintLanguage:
    XSD | Java | OCL | Natural
;

SemanticConcept:
	(subset?='subsets')? 'semantic' (broadestConcept=STRING)? 'in' vocabularyURI=STRING
;